:root {
  --headerHeight: 43px;
  --menuWidth: 200px;
}

:global(#app) {
  height: 100%;
}

.app-layout {
  height: 100vh;
  display: grid;
  grid-template-rows: auto var(--headerHeight) 1fr;
  grid-template-columns: auto 1fr;
}

.app-layout > .global-notifications {
  grid-row: 1;
  grid-column: 1/3;
}

.app-layout > header {
  grid-row: 2;
  grid-column: 1/3;
}

.app-layout > .main {
  grid-column: 2;
  grid-row: 3;

  /*
    Allow the this flex child to grow smaller than its smallest content.
    This is needed when there is a really wide text inside that would stretch
    this node to be wider than the parent.
  */
  min-width: 0;
  overflow-x: hidden;
  overflow-y: scroll;

  /*
    layout the children. There will always be the page and side notification
    about the actual content. The content should stretch to fill the rest of
    the page.
  */
  display: flex;
  flex-direction: column;

  /*
    set position to relative to layout notifications and modals
  */
  position: relative;
}

.content {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

/*
  this is only necessary because we have an intermediary <div> wrapping the
  <View> component that is used to wrap every content-view. This intermediary
  <div> is solely used for adding the tracking context to the content-view.
  However, this could be done by passing the tracking context to the <View>
  and let it do the layout, so we can avoid laying our from the outside as we
  do here.
*/
.content > * {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

.app-layout > aside {
  position: relative;
  grid-row: 3;
  display: flex;
  flex-direction: column;
}
