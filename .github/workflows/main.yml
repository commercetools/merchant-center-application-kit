name: Main workflow

# The event triggers are configured as following:
# - on branch master, trigger the workflow on every push
# - on any pull request, trigger the workflow
# This is to avoid running the workflow twice on pull requests.
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build_lint_and_test:
    runs-on: ubuntu-latest

    # https://github.com/bahmutov/cypress-gh-action-split-install/blob/ca3916d4e7240ebdc337825d2d78eb354855464b/.github/workflows/tests.yml#L8-L11
    env:
      # prevents extra Cypress installation progress messages
      CI: 1
      # avoid warnings like "tput: No value for $TERM and no -T specified"
      TERM: xterm

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm

      - name: Setup Node (uses version in .nvmrc)
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          # https://github.com/bahmutov/cypress-gh-action-split-install/blob/ca3916d4e7240ebdc337825d2d78eb354855464b/.github/workflows/tests.yml#L14-L18
          # https://github.com/marketplace/actions/cypress-io#custom-install
          CYPRESS_INSTALL_BINARY: 0

      - name: Building packages
        run: yarn build

      - name: Running static type checking
        run: yarn typecheck

      - name: Running linters and tests
        run: yarn run jest --projects jest.{eslint,stylelint,test,text}.config.js --reporters jest-silent-reporter
        env:
          CI: true

      - name: Building Visual Regression Tests application for UI components
        run: yarn visual-testing-app:build

      - name: Running Visual Regression Tests for UI components
        uses: ianwalter/puppeteer@v2.0.0
        with:
          args: "yarn vrt:components"
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN_UI_COMPONENTS }}

      # https://github.com/bahmutov/cypress-gh-action-split-install/blob/ca3916d4e7240ebdc337825d2d78eb354855464b/.github/workflows/tests.yml#L23-L30
      # https://github.com/marketplace/actions/cypress-io#custom-install
      - name: Restoring Cypress cache
        # restore / cache the binary ourselves on Linux
        # see https://github.com/actions/cache
        id: cache-cypress
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('**/package.json') }}

      - name: Installing Cypress binary
        run: yarn run cypress install && yarn run cypress cache list

      - name: Building Playground application
        run: yarn playground:build

      - name: Running End-to-End tests for Playground application
        run: yarn run start-server-and-test 'yarn playground:start:prod:local' 3001 'yarn run percy exec -- yarn test:e2e:playground'
        env:
          NODE_ENV: test
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN_E2E_PLAYGROUND }}
          CYPRESS_CI: "true"
          CYPRESS_LOGIN_USER: ${{ secrets.CYPRESS_LOGIN_USER }}
          CYPRESS_LOGIN_PASSWORD: ${{ secrets.CYPRESS_LOGIN_PASSWORD }}
          CYPRESS_PROJECT_KEY: ${{ secrets. CYPRESS_PROJECT_KEY }}

      - name: Building Starter template application
        run: yarn template-starter:build

      - name: Running End-to-End tests for Starter template application
        run: yarn run start-server-and-test 'yarn template-starter:start:prod:local' 3001 'yarn run percy exec -- yarn test:e2e:template-starter'
        env:
          NODE_ENV: test
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN_E2E_STARTER }}
          CYPRESS_CI: "true"
          CYPRESS_LOGIN_USER: ${{ secrets.CYPRESS_LOGIN_USER }}
          CYPRESS_LOGIN_PASSWORD: ${{ secrets.CYPRESS_LOGIN_PASSWORD }}
          CYPRESS_PROJECT_KEY: ${{ secrets. CYPRESS_PROJECT_KEY }}

      - name: Uploading Cypress artifacts
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos

      - name: Deploying Playground application to Vercel
        if: github.ref == 'refs/heads/master'
        run: ./scripts/deploy_playground.sh
        env:
          ZEIT_NOW_PLAYGROUND: ${{ secrets.ZEIT_NOW_PLAYGROUND }}

      - name: Preparing tarballs of packages for testing templates installation
        if: github.ref != 'refs/heads/master'
        run: node ./scripts/build-tarballs.js

      # TODO: in the future we want to extract this step into a separate job to be able
      # to test this in multiple environments (macOS, Window) and with different node
      # versions (13, 14). This can be done using the action strategy matrix.
      # However, in order to do that, we need to be able to persist the tarballs between
      # jobs. This can be done by using the upload/download artifacts actions.
      # However, at this time there is no option to clean up the artifacts automatically
      # after the workflow ends, and the artifacts will stay for 90 days.
      # Some related issues:
      # - https://github.com/actions/upload-artifact/issues/5
      # - https://github.com/actions/upload-artifact/issues/45
      - name: Installing and building template starter
        if: github.ref != 'refs/heads/master'
        run: node ./scripts/install-template.js
        env:
          TEMPLATE_NAME: starter
  #     - name: Uploading tarball artifacts
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: dist-tarballs
  #         path: dist-tarballs
  # install_template_starter:
  #   needs: build_lint_and_test
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [macos-latest, windows-latest]
  #       node: [13, 14]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: dist-tarballs
  #         path: dist-tarballs
  #     - name: Setup node
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node }}
  #     - name: Installing shelljs globally
  #       run: yarn add global shelljs
  #     - name: Installing and building template starter
  #       run: node ./scripts/install-template.js
  #       env:
  #         TEMPLATE_NAME: starter
  #     - name: Fetching workflow artifacts
  #       uses: octokit/request-action@v2.x
  #       if: always()
  #       id: get_workflow_artifacts
  #       with:
  #         route: GET /repos/:owner/:repository/actions/runs/:run_id/artifacts
  #         owner: commercetools
  #         repository: ${{ github.repository }}
  #         run_id: ${{ github.run_id }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Parsing result to get the artifact_id
  #       uses: gr2m/get-json-paths-action@v1.x
  #       if: always()
  #       id: get_artifact_id
  #       with:
  #         json: ${{ steps.get_workflow_artifacts.outputs.data }}
  #         artifact_id: "artifacts[0].id"
  #     - name: Deleting workflow artifact
  #       uses: octokit/request-action@v2.x
  #       if: always()
  #       with:
  #         route: DELETE /repos/:owner/:repository/actions/artifacts/:artifact_id
  #         owner: commercetools
  #         repository: ${{ github.repository }}
  #         artifact_id: ${{ steps.get_artifact_id.outputs.artifact_id }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
